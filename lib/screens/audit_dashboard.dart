import 'dart:io';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:screenshot/screenshot.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import '../services/audit_service.dart';
import '../widgets/audit_charts.dart';
import '../widgets/audit_report_webview.dart';
import '../widgets/severity_pie_chart.dart';

class AuditDashboard extends StatefulWidget {
  const AuditDashboard({super.key});

  @override
  AuditDashboardState createState() => AuditDashboardState();
}

class AuditDashboardState extends State<AuditDashboard> {
  final _controller = TextEditingController();
  bool isButtonEnabled = false;
  final _service = AuditService();
  final _screenshotController = ScreenshotController();
  AuditResult? auditData;

  void loadData() {
    final jsonData = {
      "task_id": "12345",
      "status": "completed",
      "results": {
        "score": 70,
        "accuracy": 80,
        "efficiency": 65,
        "compliance": 50,
        "Pages": 10,
      },
    };

    setState(() {
      auditData = AuditResult.fromJson(jsonData);
    });
  }

  @override
  void initState() {
    super.initState();
    _controller.addListener(() {
      setState(() {
        isButtonEnabled = _controller.text.trim().isNotEmpty;
      });
    });
  }

  BarChartGroupData _buildBarGroup(int x, String label, dynamic value) {
    return BarChartGroupData(
      x: x,
      barRods: [
        BarChartRodData(toY: (value ?? 0).toDouble(), color: Colors.blue),
      ],
    );
  }

  PieChartSectionData _buildPieSection(
    String title,
    dynamic value,
    Color color,
  ) {
    return PieChartSectionData(
      value: (value ?? 0).toDouble(),
      color: color,
      title: title,
      radius: 50,
      titleStyle: const TextStyle(fontSize: 12, color: Colors.white),
    );
  }

  String _status = '';
  String? _taskId;
  Map<String, dynamic>? _results;

  Future<void> _startAudit() async {
    setState(() {
      _status = 'Starting audit...';
      _results = null;
    });

    final result = await _service.startAudit(_controller.text);
    _taskId = result.taskId;

    String? status = result.status;
    while (status != 'completed') {
      await Future.delayed(Duration(seconds: 3));
      status = await _service.getAuditStatus(_taskId!);
      setState(() => _status = 'Status: $status');
    }

    final finalResult = await _service.getAuditResult(_taskId!);
    setState(() {
      _results = finalResult.results.toString() as Map<String, dynamic>?;
      _status = 'Completed';
    });
  }

  Future<void> _exportChart() async {
    final image = await _screenshotController.capture();
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/audit_chart.png');
    await file.writeAsBytes(image!);
    // await GallerySaver.saveImage(file.path);

    // Share.shareFiles([file.path], text: 'Audit chart exported from Alora Site Auditor');
  }

  Future<void> _exportSummaryPdf() async {
    final pdf = pw.Document();
    pdf.addPage(
      pw.MultiPage(
        build:
            (context) => [
              pw.Text(
                'Alora Site Audit Summary',
                style: pw.TextStyle(
                  fontSize: 24,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.SizedBox(height: 12),
              pw.Text('Website: ${_controller.text}'),
              pw.SizedBox(height: 12),
              pw.Text('SEO Score: ${_results?['seo']['score'] ?? 'N/A'}'),
              pw.Text(
                'Broken Links: ${_results?['links']['broken']?.length ?? 0}',
              ),
              pw.Text(
                'Security Findings: ${_results?['security']['nuclei']?.length ?? 0} items',
              ),
              pw.SizedBox(height: 12),
              pw.Text(
                'Business Profile:',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
              ),
              pw.Text(_results?['business_profile'].toString() ?? ''),
              pw.SizedBox(height: 20),
              pw.Text('Generated by Alora Audit'),
            ],
      ),
    );

    final output = await getApplicationDocumentsDirectory();
    final file = File('${output.path}/audit_summary.pdf');
    await file.writeAsBytes(await pdf.save());
    await Printing.sharePdf(
      bytes: await pdf.save(),
      filename: 'audit_summary.pdf',
    );
  }

  Widget _buildResultCard(String title, dynamic data) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      child: ExpansionTile(
        title: Text(title, style: TextStyle(fontWeight: FontWeight.bold)),
        children: [
          Container(
            width: double.infinity,
            padding: EdgeInsets.all(12),
            color: Colors.grey.shade100,

            child: Text(data.toString()),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final metrics = auditData?.results ?? {};
    final charts =
        _results == null
            ? SizedBox()
            : Screenshot(
              controller: _screenshotController,
              child: AuditCharts(
                seo: _results!['seo'],
                links: _results!['links'],
              ),
            );

    final severity =
        _results == null
            ? SizedBox()
            : SeverityPieChart(
              nucleiFindings: _results!['security']['nuclei'] ?? [],
            );

    return Scaffold(
      appBar: AppBar(title: Text('Alora Audit Dashboard')),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              TextField(
                controller: _controller,
                decoration: InputDecoration(labelText: 'Enter Website URL'),
              ),
              SizedBox(height: 12),
              ElevatedButton(
                onPressed: isButtonEnabled ? () => loadData : loadData,
                child: Text('Start Audit'),
              ),
              SizedBox(height: 12),
              // Bar Chart Section
              if (auditData != null) ...[
                // const Text("ðŸ“Š Bar Chart", style: TextStyle(fontSize: 20)),
                // Row(
                //   mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                //   children: [
                //     ElevatedButton.icon(
                //       icon: Icon(Icons.image),
                //       label: Text("Export Chart"),
                //       onPressed: _exportChart,
                //     ),
                //     ElevatedButton.icon(
                //       icon: Icon(Icons.picture_as_pdf),
                //       label: Text("Export Summary"),
                //       onPressed: _exportSummaryPdf,
                //     ),
                //
                //   ],
                // ),
                const Text("Pie Chart", style: TextStyle(fontSize: 20)),
                const SizedBox(height: 10),
                SizedBox(
                  height: 250,
                  child: PieChart(
                    PieChartData(
                      sections: [
                        _buildPieSection(
                          'Score',
                          metrics['score'],
                          Colors.blue,
                        ),
                        _buildPieSection(
                          'Broken Links',
                          metrics['accuracy'],
                          Colors.orange,
                        ),
                        _buildPieSection(
                          'Accessibility',
                          metrics['efficiency'],
                          Colors.green,
                        ),
                        _buildPieSection(
                          'Security',
                          metrics['compliance'],
                          Colors.purple,
                        ),
                        _buildPieSection(
                          'Pages',
                          metrics['compliance'],
                          Colors.red,
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 10),
                const Text("Bar Chart", style: TextStyle(fontSize: 20)),
                SizedBox(
                  height: 250,
                  child: BarChart(
                    BarChartData(
                      barGroups: [
                        _buildBarGroup(0, 'SEO', metrics['score']),
                        _buildBarGroup(1, 'Broken Links', metrics['accuracy']),
                        _buildBarGroup(
                          2,
                          'Accessibility',
                          metrics['efficiency'],
                        ),
                        _buildBarGroup(3, 'Security', metrics['compliance']),
                        _buildBarGroup(4, 'Pages', metrics['compliance']),
                      ],
                      titlesData: FlTitlesData(
                        bottomTitles: AxisTitles(
                          sideTitles: SideTitles(
                            showTitles: true,
                            getTitlesWidget: (value, _) {
                              const labels = [
                                'SEO',
                                'Broken',
                                'Accessibility',
                                'Security',
                                'Pages',
                              ];
                              return Padding(
                                padding: const EdgeInsets.only(top: 8.0),
                                child: Text(
                                  labels[value.toInt()],
                                  style: const TextStyle(fontSize: 10),
                                ),
                              );
                            },
                          ),
                        ),
                        leftTitles: AxisTitles(),
                      ),
                    ),
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    TextButton(
                      onPressed:
                          () => Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (_) => AuditReportWebView(),
                            ),
                          ),
                      child: Text('View Full Report'),
                    ),
                    ElevatedButton.icon(
                      icon: Icon(Icons.picture_as_pdf),
                      label: Text("Export Summary"),
                      onPressed: _exportSummaryPdf,
                    ),
                  ],
                ),
                // const SizedBox(height: 40),
                // const Text("Pie Chart", style: TextStyle(fontSize: 20)),
                // const SizedBox(height: 10),
                // SizedBox(
                //   height: 250,
                //   child: PieChart(
                //     PieChartData(
                //       sections: [
                //         _buildPieSection('Score', metrics['score'], Colors.blue),
                //         _buildPieSection('Broken Links', metrics['accuracy'], Colors.orange),
                //         _buildPieSection('Accessibility', metrics['efficiency'], Colors.green),
                //         _buildPieSection('Security', metrics['compliance'], Colors.purple),
                //         _buildPieSection('Pages', metrics['compliance'], Colors.red),
                //       ],
                //     ),
                //   ),
                // ),
              ],
              Text(_status),
              if (_results != null) ...[
                charts,
                severity,
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      icon: Icon(Icons.image),
                      label: Text("Export Chart"),
                      onPressed: _exportChart,
                    ),
                    ElevatedButton.icon(
                      icon: Icon(Icons.picture_as_pdf),
                      label: Text("Export Summary"),
                      onPressed: _exportSummaryPdf,
                    ),
                  ],
                ),
                _buildResultCard('SEO', _results!['seo']),
                _buildResultCard('Broken Links', _results!['links']),
                _buildResultCard('Accessibility', _results!['accessibility']),
                _buildResultCard('Security', _results!['security']),
                _buildResultCard(
                  'Business Profile',
                  _results!['business_profile'],
                ),
                _buildResultCard('Pages', _results!['pages']),
                _buildResultCard(
                  'Alt Text Suggestions',
                  _results!['alt_text_suggestions'],
                ),
                _buildResultCard('Compliance', _results!['compliance']),
                TextButton(
                  onPressed:
                      () => Navigator.push(
                        context,
                        MaterialPageRoute(builder: (_) => AuditReportWebView()),
                      ),
                  child: Text('View Full Report'),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}
